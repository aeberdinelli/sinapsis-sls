frameworkVersion: ">=1.50.0"
app: sinapsis
service: api

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  lambdaHashingVersion: "20201221"
  tags:
    project: sinapsis
    stage: ${opt:stage, self:custom.defaultStage}

  environment:
    NODE_ENV: ${self:provider.stage, 'dev'}
    APP_NAME: ${self:service}
    REGION: ${self:provider.region, 'us-east-1'}

custom:
  defaultStage: dev-local
  bucketPrefix: aeberdinelli # Change this to prevent "bucket already exists" errors
  s3:
    host: localhost
    directory: /tmp

plugins:
  - serverless-s3-local
  - serverless-iam-roles-per-function
  - serverless-offline

resources:
  Resources:
    # This is the bucket where the thumbnails will be stored
    ThumbnailsBucket:
      Type: AWS::S3::Bucket
      Properties: 
        BucketName: ${self:custom.bucketPrefix}-${self:service}-thumbnails

    # This is where the input images will be stored
    UploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketPrefix}-${self:service}-uploads

# Lambda functions
functions: 
  getUploadUrl:
    handler: src/lambdas/getUploadUrl.getUploadUrl
    description: Get a signed url for uploading images
    iamRoleStatements: 
      - Effect: "Allow"
        Action:
          - s3:PutObject
        Resource:
          Ref: UploadsBucket
    environment:
      UPLOADS_BUCKET: ${self:custom.bucketPrefix}-${self:service}-uploads
    events:
      - http:
          path: /getUploadUrl
          cors: true
          method: get

  getLatestImages:
    handler: src/lambdas/getLatestImages.getLatestImages
    description: Get a list of the latest images url
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - s3:GetObject
        Resource:
          Ref: ThumbnailsBucket
    environment:
      THUMBNAILS_BUCKET: ${self:custom.bucketPrefix}-${self:service}-thumbnails
    events:
      - http:
          path: /images
          cors: true
          method: get

  processImage:
    handler: src/lambdas/processImage.processImage
    description: Generates thumbnails every time an image enters the bucket
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - s3:GetObject
        Resource:
          Ref: UploadsBucket
      - Effect: "Allow"
        Action:
          - s3:PutObject
        Resource:
          Ref: ThumbnailsBucket
    environment:
      UPLOADS_BUCKET: ${self:custom.bucketPrefix}-${self:service}-uploads
      THUMBNAILS_BUCKET: ${self:custom.bucketPrefix}-${self:service}-thumbnails
    events:
      - s3:
          bucket: ${self:custom.bucketPrefix}-${self:service}-uploads
          event: s3:ObjectCreated:*
          rules:
            - suffix: .png
      - s3:
          bucket: ${self:custom.bucketPrefix}-${self:service}-uploads
          event: s3:ObjectCreated:*
          rules:
            - suffix: .jpg